<!--Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0.-->
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Class with Inline Constructor/Destructor</Title>
      <Shortcut>ci</Shortcut>
      <Description>Class declaration with inline constructor/destructor</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:class_with_inline_constructor_destructor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[class $name$
{
public:
    $name$()
    {
    }

    ~$name$()
    {
    }

private:
    $selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>array type</Title>
      <Shortcut>a</Shortcut>
      <Description>array type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ArrayOfTType</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$_type$[]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Assembly attribute</Title>
      <Shortcut>ae</Shortcut>
      <Description>Assembly attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:AssemblyAttribute</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:ay</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>attribute</ID>
          <ToolTip>Attribute</ToolTip>
          <Default>Attribute</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[[assembly: $attribute$]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>break statement</Title>
      <Shortcut>bk</Shortcut>
      <Description>break statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:BreakStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[break;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Conditional attribute</Title>
      <Shortcut>ae</Shortcut>
      <Description>Conditional attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ConditionalAttribute</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:cl</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>conditionString</ID>
          <ToolTip>Condition string</ToolTip>
          <Default>"DEBUG"</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[[Conditional($conditionString$)]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>?: operator (equal to null)</Title>
      <Shortcut>con</Shortcut>
      <Description>?: (conditional) operator with condition whether the expression is equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ConditionalOperatorEqualToNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>expression</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>False expression</ToolTip>
          <Default>null</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>True expression</ToolTip>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[($expression$ == null) ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>?: operator (not equal to null)</Title>
      <Shortcut>conn</Shortcut>
      <Description>?: (conditional) operator with condition whether the expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ConditionalOperatorNotEqualToNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>expression</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>False expression</ToolTip>
          <Default>null</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>True expression</ToolTip>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[($expression$ != null) ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>continue statement</Title>
      <Shortcut>ce</Shortcut>
      <Description>continue statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ContinueStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[continue;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Debug.Assert != null</Title>
      <Shortcut>dann</Shortcut>
      <Description>Debug.Assert method with condition whether the expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DebugAssertNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>message</ID>
          <ToolTip>The message text</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Debug.Assert($expression$ != null, $message$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>DebuggerDisplay attribute</Title>
      <Shortcut>ae</Shortcut>
      <Description>DebuggerDisplay attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DebuggerDisplayAttribute</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:dd</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value</ToolTip>
          <Default>"{}"</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[[DebuggerDisplay($value$)]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>DebuggerStepThrough attribute</Title>
      <Shortcut>ae</Shortcut>
      <Description>DebuggerStepThrough attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DebuggerStepThroughAttribute</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:dst</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp"><![CDATA[[DebuggerStepThrough]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary&lt;TKey, TValue&gt; type</Title>
      <Shortcut>gd</Shortcut>
      <Description>Dictionary&lt;TKey, TValue&gt; type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DictionaryOfTKeyTValueType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>_valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Dictionary<$_keyType$, $_valueType$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary&lt;TKey, TValue&gt; variable</Title>
      <Shortcut>vd</Shortcut>
      <Description>Dictionary&lt;TKey, TValue&gt; variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DictionaryOfTKeyTValueVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>dictionaryIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>dic</Default>
        </Literal>
        <Literal>
          <ID>keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $dictionaryIdentifier$ = new Dictionary<$keyType$, $valueType$>();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary&lt;TKey, TValue&gt; variable (with initializer)</Title>
      <Shortcut>vd_</Shortcut>
      <Description>Dictionary&lt;TKey, TValue&gt; variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DictionaryOfTKeyTValueVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
        <Literal>
          <ID>dictionaryIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>dic</Default>
        </Literal>
        <Literal>
          <ID>keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $dictionaryIdentifier$ = new Dictionary<$keyType$, $valueType$>() { [0] = $_value$ };$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Directory.CreateDirectory</Title>
      <Shortcut>iod</Shortcut>
      <Description>Directory.CreateDirectory method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DirectoryCreateDirectory</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:cd</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Directory path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Directory.CreateDirectory($path$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Directory.Delete</Title>
      <Shortcut>iod</Shortcut>
      <Description>Directory.Delete method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DirectoryDelete</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:d</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Directory path</ToolTip>
          <Default>path</Default>
        </Literal>
        <Literal>
          <ID>recursive</ID>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Directory.Delete($path$, recursive: $recursive$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Directory.EnumerateDirectories</Title>
      <Shortcut>iod</Shortcut>
      <Description>Directory.EnumerateDirectories method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DirectoryEnumerateDirectories</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:ed</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Directory path</ToolTip>
          <Default>path</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <ToolTip>Search pattern</ToolTip>
          <Default>"*"</Default>
        </Literal>
        <Literal>
          <ID>searchOption</ID>
          <ToolTip>SearchOption</ToolTip>
          <Default>.AllDirectories</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Directory.EnumerateDirectories($path$, $pattern$, SearchOption$searchOption$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Directory.EnumerateFiles</Title>
      <Shortcut>iod</Shortcut>
      <Description>Directory.EnumerateFiles method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DirectoryEnumerateFiles</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:ef</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Directory path</ToolTip>
          <Default>path</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <ToolTip>Search pattern</ToolTip>
          <Default>"*"</Default>
        </Literal>
        <Literal>
          <ID>searchOption</ID>
          <ToolTip>SearchOption</ToolTip>
          <Default>.AllDirectories</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Directory.EnumerateFiles($path$, $pattern$, SearchOption$searchOption$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Directory.Exists</Title>
      <Shortcut>iod</Shortcut>
      <Description>Directory.Exists method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DirectoryExists</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:e</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Directory path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Directory.Exists($path$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Directory.GetDirectories</Title>
      <Shortcut>iod</Shortcut>
      <Description>Directory.GetDirectories method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DirectoryGetDirectories</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:gd</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Directory path</ToolTip>
          <Default>path</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <ToolTip>Search pattern</ToolTip>
          <Default>"*"</Default>
        </Literal>
        <Literal>
          <ID>searchOption</ID>
          <ToolTip>SearchOption</ToolTip>
          <Default>.AllDirectories</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Directory.GetDirectories($path$, $pattern$, SearchOption$searchOption$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Directory.GetFiles</Title>
      <Shortcut>iod</Shortcut>
      <Description>Directory.GetFiles method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DirectoryGetFiles</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:gf</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Directory path</ToolTip>
          <Default>path</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <ToolTip>Search pattern</ToolTip>
          <Default>"*"</Default>
        </Literal>
        <Literal>
          <ID>searchOption</ID>
          <ToolTip>Search option</ToolTip>
          <Default>.AllDirectories</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Directory.GetFiles($path$, $pattern$, SearchOption$searchOption$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Directory.Move</Title>
      <Shortcut>iod</Shortcut>
      <Description>Directory.Move method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DirectoryMove</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:m</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>destinationDirName</ID>
          <ToolTip>Destination file name</ToolTip>
          <Default>destinationDirName</Default>
        </Literal>
        <Literal>
          <ID>sourceDirName</ID>
          <ToolTip>Source file name</ToolTip>
          <Default>sourceDirName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Directory.Move($sourceDirName$, $destinationDirName$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>do while not null</Title>
      <Shortcut>donn</Shortcut>
      <Description>do statement with condition whether an expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DoNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[do
{
    $end$

} while ($expression$ != null);]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>do while null</Title>
      <Shortcut>don</Shortcut>
      <Description>do statement with condition whether an expression is equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DoNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[do
{
    $end$

} while ($expression$ == null);]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>c Enumerable.Cast</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.Cast method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableCast</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.Cast<$_type$>()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>e Enumerable.Empty</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.Empty method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Enumerable.Empty<$_type$>()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>f Enumerable.First</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.First method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableFirst</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>predicate</ID>
          <ToolTip>Predicate</ToolTip>
          <Default>false</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.First($_lambdaParam$ => $predicate$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>fod Enumerable.FirstOrDefault</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.FirstOrDefault method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableFirstOrDefault</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>predicate</ID>
          <ToolTip>Predicate</ToolTip>
          <Default>false</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.FirstOrDefault($_lambdaParam$ => $predicate$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>gb Enumerable.GroupBy</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.GroupBy method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableGroupBy</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>keySelector</ID>
          <ToolTip>Key selector</ToolTip>
          <Default>f</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.GroupBy($_lambdaParam$ => $keySelector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>gj Enumerable.GroupJoin</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.GroupJoin method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableGroupJoin</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal Editable="false">
          <ID>_lambdaParam2</ID>
          <Default>g</Default>
        </Literal>
        <Literal>
          <ID>inner</ID>
          <ToolTip>Inner sequence</ToolTip>
          <Default>inner</Default>
        </Literal>
        <Literal>
          <ID>innerKeySelector</ID>
          <ToolTip>Inner sequence key selector</ToolTip>
          <Default>g</Default>
        </Literal>
        <Literal>
          <ID>outerKeySelector</ID>
          <ToolTip>Outer sequence key selector</ToolTip>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>resultSelector</ID>
          <ToolTip>Result selector</ToolTip>
          <Default>new { }</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.GroupJoin($inner$, $_lambdaParam$ => $outerKeySelector$, $_lambdaParam2$ => $innerKeySelector$, ($_lambdaParam$, $_lambdaParam2$) => $resultSelector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>j Enumerable.Join</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.Join method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableJoin</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal Editable="false">
          <ID>_lambdaParam2</ID>
          <Default>g</Default>
        </Literal>
        <Literal>
          <ID>inner</ID>
          <ToolTip>Inner sequence</ToolTip>
          <Default>inner</Default>
        </Literal>
        <Literal>
          <ID>innerKeySelector</ID>
          <ToolTip>Inner sequence key selector</ToolTip>
          <Default>g</Default>
        </Literal>
        <Literal>
          <ID>outerKeySelector</ID>
          <ToolTip>Outer sequence key selector</ToolTip>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>resultSelector</ID>
          <ToolTip>Result selector</ToolTip>
          <Default>new { }</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.Join($inner$, $_lambdaParam$ => $outerKeySelector$, $_lambdaParam2$ => $innerKeySelector$, ($_lambdaParam$, $_lambdaParam2$) => $resultSelector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>l Enumerable.Last</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.Last method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableLast</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>predicate</ID>
          <ToolTip>Predicate</ToolTip>
          <Default>false</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.Last($_lambdaParam$ => $predicate$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>lod Enumerable.LastOrDefault</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.LastOrDefault method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableLastOrDefault</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>predicate</ID>
          <ToolTip>Predicate</ToolTip>
          <Default>false</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.LastOrDefault($_lambdaParam$ => $predicate$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>mx Enumerable.Max</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.Max method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableMax</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>selector</ID>
          <ToolTip>Selector</ToolTip>
          <Default>f</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.Max($_lambdaParam$ => $selector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>mn Enumerable.Min</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.Min method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableMin</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>selector</ID>
          <ToolTip>Selector</ToolTip>
          <Default>f</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.Min($_lambdaParam$ => $selector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ot Enumerable.OfType</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.OfType method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableOfType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.OfType<$_type$>()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>ob Enumerable.OrderBy</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.OrderBy method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableOrderBy</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>keySelector</ID>
          <ToolTip>Key selector</ToolTip>
          <Default>f</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.OrderBy($_lambdaParam$ => $keySelector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>obd Enumerable.OrderByDescending</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.OrderByDescending method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableOrderByDescending</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>keySelector</ID>
          <ToolTip>Key selector</ToolTip>
          <Default>f</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.OrderByDescending($_lambdaParam$ => $keySelector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>s Enumerable.Select</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.Select method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableSelect</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>selector</ID>
          <ToolTip>Selector</ToolTip>
          <Default>f</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.Select($_lambdaParam$ => $selector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sm Enumerable.SelectMany</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.SelectMany method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableSelectMany</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>selector</ID>
          <ToolTip>Selector</ToolTip>
          <Default>f</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.SelectMany($_lambdaParam$ => $selector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sod Enumerable.SingleOrDefault</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.SingleOrDefault method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableSingleOrDefault</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>predicate</ID>
          <ToolTip>Predicate</ToolTip>
          <Default>false</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.SingleOrDefault($_lambdaParam$ => $predicate$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>sw Enumerable.SkipWhile</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.SkipWhile method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableSkipWhile</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>predicate</ID>
          <ToolTip>Predicate</ToolTip>
          <Default>false</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.SkipWhile($_lambdaParam$ => $predicate$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>tw Enumerable.TakeWhile</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.TakeWhile method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableTakeWhile</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>predicate</ID>
          <ToolTip>Predicate</ToolTip>
          <Default>false</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.TakeWhile($_lambdaParam$ => $predicate$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>tb Enumerable.ThenBy</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.ThenBy method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableThenBy</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>keySelector</ID>
          <ToolTip>Key selector</ToolTip>
          <Default>f</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.ThenBy($_lambdaParam$ => $keySelector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>tbd Enumerable.ThenByDescending</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.ThenByDescending method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableThenByDescending</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>keySelector</ID>
          <ToolTip>Key selector</ToolTip>
          <Default>f</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.ThenByDescending($_lambdaParam$ => $keySelector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>w Enumerable.Where</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.Where method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableWhere</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>predicate</ID>
          <ToolTip>Predicate</ToolTip>
          <Default>false</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.Where($_lambdaParam$ => $predicate$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>wnn Enumerable.Where not equal to null</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.Where method with predicate whether the expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableWhereNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.Where($_lambdaParam$ => $_lambdaParam$ != null)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>z Enumerable.Zip</Title>
      <Shortcut>q</Shortcut>
      <Description>Enumerable.Zip method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:EnumerableZip</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Linq</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="false">
          <ID>_lambdaParam</ID>
          <Default>f</Default>
        </Literal>
        <Literal Editable="false">
          <ID>_lambdaParam2</ID>
          <Default>g</Default>
        </Literal>
        <Literal>
          <ID>resultSelector</ID>
          <ToolTip>Result selector</ToolTip>
          <Default>new { }</Default>
        </Literal>
        <Literal>
          <ID>second</ID>
          <ToolTip>Second sequence</ToolTip>
          <Default>second</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[.Zip($second$, ($_lambdaParam$, $_lambdaParam2$) => $resultSelector$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>File.Copy</Title>
      <Shortcut>iof</Shortcut>
      <Description>File.Copy method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:FileCopy</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:c</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>destinationFileName</ID>
          <ToolTip>Destination file name</ToolTip>
          <Default>destinationFileName</Default>
        </Literal>
        <Literal>
          <ID>sourceFileName</ID>
          <ToolTip>Source file name</ToolTip>
          <Default>sourceFileName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[File.Copy($sourceFileName$, $destinationFileName$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>File.Delete</Title>
      <Shortcut>iof</Shortcut>
      <Description>File.Delete method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:FileDelete</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:d</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>File path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[File.Delete($path$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>File Exists</Title>
      <Shortcut>iof</Shortcut>
      <Description>File.Exists method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:FileExists</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:e</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>File path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[File.Exists($path$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>File.Move</Title>
      <Shortcut>iof</Shortcut>
      <Description>File.Move method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:FileMove</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:m</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>destinationFileName</ID>
          <ToolTip>Destination file name</ToolTip>
          <Default>destinationFileName</Default>
        </Literal>
        <Literal>
          <ID>sourceFileName</ID>
          <ToolTip>Source file name</ToolTip>
          <Default>sourceFileName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[File.Move($sourceFileName$, $destinationFileName$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>File.ReadAllLines</Title>
      <Shortcut>iof</Shortcut>
      <Description>File.ReadAllLines method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:FileReadAllLines</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:ral</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_encoding</ID>
          <ToolTip>File encoding</ToolTip>
          <Default>Encoding.UTF8</Default>
        </Literal>
        <Literal>
          <ID>path</ID>
          <ToolTip>File path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[File.ReadAllLines($path$, $_encoding$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>File.ReadAllText</Title>
      <Shortcut>iof</Shortcut>
      <Description>File.ReadAllText method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:FileReadAllText</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:rat</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_encoding</ID>
          <ToolTip>File encoding</ToolTip>
          <Default>Encoding.UTF8</Default>
        </Literal>
        <Literal>
          <ID>path</ID>
          <ToolTip>File path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[File.ReadAllText($path$, $_encoding$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>File.ReadLines</Title>
      <Shortcut>iof</Shortcut>
      <Description>File.ReadLines method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:FileReadLines</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:rl</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_encoding</ID>
          <ToolTip>File encoding</ToolTip>
          <Default>Encoding.UTF8</Default>
        </Literal>
        <Literal>
          <ID>path</ID>
          <ToolTip>File path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[File.ReadLines($path$, $_encoding$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>FileStream Variable</Title>
      <Shortcut>u</Shortcut>
      <Description>FileStream variable declaration.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:FileStreamVariable</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:fesm</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>fileMode</ID>
          <ToolTip>File mode</ToolTip>
          <Default>.OpenOrCreate</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>fs</Default>
        </Literal>
        <Literal>
          <ID>path</ID>
          <ToolTip>File path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[using (var $identifier$ = new FileStream($path$, FileMode$fileMode$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>File.WriteAllLines</Title>
      <Shortcut>iof</Shortcut>
      <Description>File.WriteAllLines method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:FileWriteAllLines</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:wal</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_encoding</ID>
          <ToolTip>File encoding</ToolTip>
          <Default>Encoding.UTF8</Default>
        </Literal>
        <Literal>
          <ID>content</ID>
          <ToolTip>File content</ToolTip>
          <Default>content</Default>
        </Literal>
        <Literal>
          <ID>path</ID>
          <ToolTip>File path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[File.WriteAllLines($path$, $content$, $_encoding$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>File.WriteAllText</Title>
      <Shortcut>iof</Shortcut>
      <Description>File.WriteAllText method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:FileWriteAllText</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:wat</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_encoding</ID>
          <ToolTip>File encoding</ToolTip>
          <Default>Encoding.UTF8</Default>
        </Literal>
        <Literal>
          <ID>content</ID>
          <ToolTip>File content</ToolTip>
          <Default>""</Default>
        </Literal>
        <Literal>
          <ID>path</ID>
          <ToolTip>File path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[File.WriteAllText($path$, $content$, $_encoding$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Flags attribute</Title>
      <Shortcut>ae</Shortcut>
      <Description>Flags attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:FlagsAttribute</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:fs</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp"><![CDATA[[Flags]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet&lt;T&gt; type</Title>
      <Shortcut>ghs</Shortcut>
      <Description>HashSet&lt;T&gt; type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTType</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[HashSet<$_type$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet&lt;T&gt; variable</Title>
      <Shortcut>vhs</Shortcut>
      <Description>HashSet&lt;T&gt; variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTVariable</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new HashSet<$_type$>();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet&lt;T&gt; variable (with initializer)</Title>
      <Shortcut>vhs_</Shortcut>
      <Description>HashSet&lt;T&gt; variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTVariableWithInitializer</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new HashSet<$_type$>() { $_value$ };$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if Enum.TryParse</Title>
      <Shortcut>ifemtp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns true.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$type$ $result$;
if (Enum.TryParse($value$, out $result$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if not Enum.TryParse</Title>
      <Shortcut>iffemtp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns false.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfNotEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$type$ $result$;
if (!Enum.TryParse($value$, out $result$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if !string.IsNullOrEmpty</Title>
      <Shortcut>iffsne</Shortcut>
      <Description>if !string.IsNullOrEmpty</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfNotStringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!string.IsNullOrEmpty($expression$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if !string.IsNullOrWhiteSpace</Title>
      <Shortcut>iffsnw</Shortcut>
      <Description>if !string.IsNullOrWhiteSpace</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfNotStringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!string.IsNullOrWhiteSpace($expression$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if string.IsNullOrEmpty</Title>
      <Shortcut>ifsne</Shortcut>
      <Description>if string.IsNullOrEmpty</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfStringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (string.IsNullOrEmpty($expression$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if string.IsNullOrWhiteSpace</Title>
      <Shortcut>ifsnw</Shortcut>
      <Description>if string.IsNullOrWhiteSpace</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfStringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (string.IsNullOrWhiteSpace($expression$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal abstract modifiers</Title>
      <Shortcut>x</Shortcut>
      <Description>internal abstract modifiers</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:InternalAbstractModifiers</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:ia</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[internal abstract$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal modifier</Title>
      <Shortcut>x</Shortcut>
      <Description>internal modifier</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:InternalModifier</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:i</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[internal$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal static modifiers</Title>
      <Shortcut>x</Shortcut>
      <Description>internal static modifiers</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:InternalStaticModifiers</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:is</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[internal static$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal virtual modifiers</Title>
      <Shortcut>x</Shortcut>
      <Description>internal virtual modifiers</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:InternalVirtualModifiers</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:iv</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[internal virtual$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>lambda expression with 2 parameters</Title>
      <Shortcut>l2</Shortcut>
      <Description>lambda expression with 2 parameters</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:LambdaExpressionWithTwoParameters</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false">
          <ID>lambdaParam1</ID>
          <ToolTip>First parameter name</ToolTip>
          <Default>f</Default>
        </Literal>
        <Literal Editable="false">
          <ID>lambdaParam2</ID>
          <ToolTip>Second parameter name</ToolTip>
          <Default>g</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[($lambdaParam1$, $lambdaParam2$) => $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List&lt;T&gt; type</Title>
      <Shortcut>gl</Shortcut>
      <Description>List&lt;T&gt; type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTType</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[List<$_type$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List&lt;T&gt; variable</Title>
      <Shortcut>vl</Shortcut>
      <Description>List&lt;T&gt; variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTVariable</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new List<$_type$>();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List&lt;T&gt; variable (with initializer)</Title>
      <Shortcut>vl_</Shortcut>
      <Description>List&lt;T&gt; variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTVariableWithInitializer</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new List<$_type$>() { $_value$ };$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MemoryStream Variable</Title>
      <Shortcut>u</Shortcut>
      <Description>MemoryStream variable declaration.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:MemoryStreamVariable</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:mysm</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>ms</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Constructor parameters</ToolTip>
          <Default>0</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[using (var $identifier$ = new MemoryStream($parameters$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>namespace</Title>
      <Shortcut>ns</Shortcut>
      <Description>namespace declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:Namespace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Namespace name</ToolTip>
          <Default>NamespaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[namespace $name$
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>new array </Title>
      <Shortcut>na</Shortcut>
      <Description>new array </Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:NewArrayOfT</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arrayLength</ID>
          <ToolTip>Array length</ToolTip>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[new $_type$[$_arrayLength$]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>new array (with initializer)</Title>
      <Shortcut>na_</Shortcut>
      <Description>new array (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:NewArrayOfTWithInitializer</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[new $_type$[] { $_value$ }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection&lt;T&gt; type</Title>
      <Shortcut>goc</Shortcut>
      <Description>ObservableCollection&lt;T&gt; type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTType</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[ObservableCollection<$_type$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection&lt;T&gt; variable</Title>
      <Shortcut>voc</Shortcut>
      <Description>ObservableCollection&lt;T&gt; variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTVariable</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Collection identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new ObservableCollection<$_type$>();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection&lt;T&gt; variable (with initializer)</Title>
      <Shortcut>voc_</Shortcut>
      <Description>ObservableCollection&lt;T&gt; variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTVariableWithInitializer</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Collection identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new ObservableCollection<$_type$>() { $_value$ };$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Obsolete attribute</Title>
      <Shortcut>ae</Shortcut>
      <Description>Obsolete attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObsoleteAttribute</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:oe</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>message</ID>
          <ToolTip>Message</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[[Obsolete($message$)]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>override modifier</Title>
      <Shortcut>oe</Shortcut>
      <Description>override modifier</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:OverrideModifier</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[override$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Path.Combine</Title>
      <Shortcut>iop</Shortcut>
      <Description>Path.Combine method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PathCombine</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:c</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path1</ID>
          <ToolTip>First path</ToolTip>
          <Default>path1</Default>
        </Literal>
        <Literal>
          <ID>path2</ID>
          <ToolTip>Second path</ToolTip>
          <Default>path2</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Path.Combine($path1$, $path2$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Path.GetDirectoryName</Title>
      <Shortcut>iop</Shortcut>
      <Description>Path.GetDirectoryName method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PathGetDirectoryName</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:gdn</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Path.GetDirectoryName($path$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Path.GetExtension</Title>
      <Shortcut>iop</Shortcut>
      <Description>Path.GetExtension method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PathGetExtension</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:ge</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Path.GetExtension($path$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Path.GetFileName</Title>
      <Shortcut>iop</Shortcut>
      <Description>Path.GetFileName method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PathGetFileName</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:gfn</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Path.GetFileName($path$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Path.GetFileNameWithoutExtension</Title>
      <Shortcut>iop</Shortcut>
      <Description>Path.GetFileNameWithoutExtension method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PathGetFileNameWithoutExtension</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:gfnwe</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Path.GetFileNameWithoutExtension($path$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Path.GetFullPath</Title>
      <Shortcut>iop</Shortcut>
      <Description>Path.GetFullPath method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PathGetFullPath</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:gfp</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Path.GetFullPath($path$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Path.HasExtension</Title>
      <Shortcut>iop</Shortcut>
      <Description>Path.HasExtension method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PathHasExtension</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:he</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>Path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Path.HasExtension($path$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Path.ChangeExtension</Title>
      <Shortcut>iop</Shortcut>
      <Description>Path.ChangeExtension method.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PathChangeExtension</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:ce</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>extension</ID>
          <ToolTip>File extension</ToolTip>
          <Default>""</Default>
        </Literal>
        <Literal>
          <ID>path</ID>
          <ToolTip>File path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Path.ChangeExtension($path$, $extension$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private modifier</Title>
      <Shortcut>x</Shortcut>
      <Description>private modifier</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PrivateModifier</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:p</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[private$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private static modifiers</Title>
      <Shortcut>x</Shortcut>
      <Description>private static modifiers</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PrivateStaticModifiers</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:ps</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[private static$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>protected abstract modifiers</Title>
      <Shortcut>x</Shortcut>
      <Description>protected abstract modifiers</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ProtectedAbstractModifiers</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:da</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[protected abstract$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>protected modifier</Title>
      <Shortcut>x</Shortcut>
      <Description>protected modifier</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ProtectedModifier</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:d</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[protected$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>protected virtual modifiers</Title>
      <Shortcut>x</Shortcut>
      <Description>protected virtual modifiers</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ProtectedVirtualModifiers</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:dv</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[protected virtual$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public abstract modifiers</Title>
      <Shortcut>x</Shortcut>
      <Description>public abstract modifiers</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PublicAbstractModifiers</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[public abstract$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public modifier</Title>
      <Shortcut>x</Shortcut>
      <Description>public modifier</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PublicModifier</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:-</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[public$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public static modifiers</Title>
      <Shortcut>x</Shortcut>
      <Description>public static modifiers</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PublicStaticModifiers</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:s</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[public static$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public virtual modifiers</Title>
      <Shortcut>x</Shortcut>
      <Description>public virtual modifiers</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:PublicVirtualModifiers</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:v</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[public virtual$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>readonly modifier</Title>
      <Shortcut>ro</Shortcut>
      <Description>readonly modifier</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ReadOnlyModifier</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[readonly$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Regex type</Title>
      <Shortcut>rx</Shortcut>
      <Description>Regex type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:Regex</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Text.RegularExpressions</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp"><![CDATA[Regex$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return new</Title>
      <Shortcut>rn</Shortcut>
      <Description>return new</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ReturnNew</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[return new$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return new containing type</Title>
      <Shortcut>rnthis</Shortcut>
      <Description>return new containing type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ReturnNewThis</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false">
          <ID>className</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
          <Function>ClassName()</Function>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[return new $className$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return statement</Title>
      <Shortcut>re</Shortcut>
      <Description>return statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ReturnStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[return;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>StringBuilder variable</Title>
      <Shortcut>vsb</Shortcut>
      <Description>StringBuilder variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:StringBuilderVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>sb</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $identifier$ = new StringBuilder();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw statement</Title>
      <Shortcut>tw</Shortcut>
      <Description>throw statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ThrowStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[throw;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>TimeSpan type</Title>
      <Shortcut>ts</Shortcut>
      <Description>TimeSpan type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:TimeSpanType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp"><![CDATA[TimeSpan$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>variable declaration with as operator + if not null</Title>
      <Shortcut>vasnn</Shortcut>
      <Description>variable declaration with as operator + condition whether the variable is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:VariableAsTIfNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Type to cast to</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to cast</ToolTip>
          <Default>expression</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $identifier$ = $expression$ as $_type$;
if ($identifier$ != null)
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>while not null</Title>
      <Shortcut>wenn</Shortcut>
      <Description>while statement with condition whether an expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:WhileNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[while ($expression$ != null)
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>while null</Title>
      <Shortcut>wen</Shortcut>
      <Description>while statement with condition whether an expression is equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:WhileNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[while ($expression$ == null)
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>yield return new</Title>
      <Shortcut>yrn</Shortcut>
      <Description>yield return new</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:YieldReturnNew</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[yield return new$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>yield return new containing type</Title>
      <Shortcut>yrnthis</Shortcut>
      <Description>yield return new containing type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:YieldReturnNewThis</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false">
          <ID>className</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
          <Function>ClassName()</Function>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[yield return new $className$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>div with class attribute</Title>
      <Shortcut>divcs</Shortcut>
      <Description>div with class attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:div_class</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>class</ID>
          <ToolTip>CSS class name</ToolTip>
          <Default>class</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<div class="$class$">$end$</div>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>div with id attribute</Title>
      <Shortcut>divid</Shortcut>
      <Description>div with id attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:div_id</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>id</ID>
          <ToolTip>CSS id value</ToolTip>
          <Default>id</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<div id="$id$">$end$</div>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>meta viewport</Title>
      <Shortcut>metavp</Shortcut>
      <Description>meta viewport</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:meta_viewport</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Html"><![CDATA[<meta name="viewport" content="width=device-width" />$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>span with class attribute</Title>
      <Shortcut>spancs</Shortcut>
      <Description>span with class attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:span_class</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>class</ID>
          <ToolTip>CSS class name</ToolTip>
          <Default>class</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<span class="$class$">$end$</span>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>span with id attribute</Title>
      <Shortcut>spanid</Shortcut>
      <Description>span with id attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:span_id</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>id</ID>
          <ToolTip>CSS id value</ToolTip>
          <Default>id</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<span id="$id$">$end$</span>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>table with sections</Title>
      <Shortcut>table2</Shortcut>
      <Description>table with sections</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:table_with_sections</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Html"><![CDATA[<table>
    <caption>$end$</caption>
    <thead>
        <tr>
            <th></th>
        </tr>
    </thead>
    <tfoot>
        <tr>
            <td></td>
        </tr>
    </tfoot>
    <tbody>
        <tr>
            <td></td>
        </tr>
    </tbody>
</table>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>array type</Title>
      <Shortcut>a</Shortcut>
      <Description>array type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ArrayOfTType</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$_type$()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary(Of TKey, TValue) variable</Title>
      <Shortcut>vd</Shortcut>
      <Description>Dictionary(Of TKey, TValue) variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DictionaryOfTKeyTValueVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>dictionaryIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>dic</Default>
        </Literal>
        <Literal>
          <ID>keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>Object</Default>
        </Literal>
        <Literal>
          <ID>valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $dictionaryIdentifier$ = new Dictionary(Of $keyType$, $valueType$)()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary(Of TKey, TValue) variable (with initializer)</Title>
      <Shortcut>vd_</Shortcut>
      <Description>Dictionary(Of TKey, TValue) variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DictionaryOfTKeyTValueVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_value</ID>
          <Default>Nothing</Default>
        </Literal>
        <Literal>
          <ID>dictionaryIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>dic</Default>
        </Literal>
        <Literal>
          <ID>keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>Object</Default>
        </Literal>
        <Literal>
          <ID>valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $dictionaryIdentifier$ = new Dictionary(Of $keyType$, $valueType$)() From {{0, $_value$}}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet(Of T) type</Title>
      <Shortcut>ghs</Shortcut>
      <Description>HashSet(Of T) type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTType</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[HashSet(Of $_type$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet(Of T) variable</Title>
      <Shortcut>vhs</Shortcut>
      <Description>HashSet(Of T) variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTVariable</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new HashSet(Of $_type$)()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet(Of T) variable (with initializer)</Title>
      <Shortcut>vhs_</Shortcut>
      <Description>HashSet(Of T) variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTVariableWithInitializer</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>Nothing</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new HashSet(Of $_type$)() From {$_value$}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if Enum.TryParse</Title>
      <Shortcut>ifemtp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns true.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $result$ As $type$
If Enum.TryParse($value$, $result$)
    $end$
End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if not Enum.TryParse</Title>
      <Shortcut>iffemtp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns false.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfNotEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $result$ As $type$
If Not Enum.TryParse($value$, $result$)
    $end$
End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Lambda expression with 2 parameters</Title>
      <Shortcut>l2</Shortcut>
      <Description>Lambda expression with 2 parameters</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:LambdaExpressionWithTwoParameters</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false">
          <ID>lambdaParam1</ID>
          <ToolTip>First parameter name</ToolTip>
          <Default>f</Default>
        </Literal>
        <Literal Editable="false">
          <ID>lambdaParam2</ID>
          <ToolTip>Second parameter name</ToolTip>
          <Default>g</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Function($lambdaParam1$, $lambdaParam2$) $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List(Of T) type</Title>
      <Shortcut>gl</Shortcut>
      <Description>List(Of T) type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTType</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[List(Of $_type$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List(Of T) variable</Title>
      <Shortcut>vl</Shortcut>
      <Description>List(Of T) variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTVariable</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new List(Of $_type$)()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List(Of T) variable (with initializer)</Title>
      <Shortcut>vl_</Shortcut>
      <Description>List(Of T) variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTVariableWithInitializer</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>Nothing</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new List(Of $_type$)() From {$_value$}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>namespace</Title>
      <Shortcut>ns</Shortcut>
      <Description>namespace declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:Namespace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Namespace name</ToolTip>
          <Default>NamespaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Namespace $name$
    $end$
End Namespace]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>new array </Title>
      <Shortcut>na</Shortcut>
      <Description>new array </Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:NewArrayOfT</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arrayLength</ID>
          <ToolTip>Array length</ToolTip>
          <Default>0</Default>
        </Literal>
        <Literal Editable="false">
          <ID>_initializer</ID>
          <Default>{}</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[New $_type$($_arrayLength$)$_initializer$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Object keyword</Title>
      <Shortcut>o</Shortcut>
      <Description>Object keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObjectKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Object$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection(Of T) type</Title>
      <Shortcut>goc</Shortcut>
      <Description>ObservableCollection(Of T) type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTType</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[ObservableCollection(Of $_type$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection(Of T) variable</Title>
      <Shortcut>voc</Shortcut>
      <Description>ObservableCollection(Of T) variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTVariable</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new ObservableCollection(Of $_type$)()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection(Of T) variable (with initializer)</Title>
      <Shortcut>voc_</Shortcut>
      <Description>ObservableCollection(Of T) variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTVariableWithInitializer</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:a</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>Nothing</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new ObservableCollection(Of $_type$)() From {$_value$}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Regex type</Title>
      <Shortcut>rx</Shortcut>
      <Description>Regex type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:Regex</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Text.RegularExpressions</Namespace>
        </Import>
      </Imports>
      <Code Language="VB"><![CDATA[Regex$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Return keyword</Title>
      <Shortcut>r</Shortcut>
      <Description>Return keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ReturnKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Return$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>StringBuilder variable</Title>
      <Shortcut>vsb</Shortcut>
      <Description>StringBuilder variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:StringBuilderVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>sb</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $identifier$ = New StringBuilder()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>String keyword</Title>
      <Shortcut>s</Shortcut>
      <Description>String keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:StringKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[String$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw statement</Title>
      <Shortcut>tw</Shortcut>
      <Description>Throw statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ThrowStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Throw$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>TimeSpan type</Title>
      <Shortcut>ts</Shortcut>
      <Description>TimeSpan type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:TimeSpanType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Code Language="VB"><![CDATA[TimeSpan$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Yield keyword</Title>
      <Shortcut>y</Shortcut>
      <Description>Yield keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:YieldKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Yield$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Canvas</Title>
      <Shortcut>p</Shortcut>
      <Description>Canvas</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:Canvas</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:c</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<Canvas>$end$</Canvas>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>DockPanel</Title>
      <Shortcut>p</Shortcut>
      <Description>DockPanel</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DockPanel</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:dp</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<DockPanel>$end$</DockPanel>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Grid</Title>
      <Shortcut>p</Shortcut>
      <Description>Grid</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:Grid</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:g</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<Grid>
    <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
    </Grid.RowDefinitions>
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
    </Grid.ColumnDefinitions>$end$
</Grid>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Grid.Row Grid.Column</Title>
      <Shortcut>gdrwcn</Shortcut>
      <Description>Grid.Column and Grid.Row</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:GridRowGridColumn</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>columnIndex</ID>
          <ToolTip>Grid column index</ToolTip>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>rowIndex</ID>
          <ToolTip>Grid row index</ToolTip>
          <Default>0</Default>
        </Literal>
      </Declarations>
      <Code Language="Xaml"><![CDATA[Grid.Row="$rowIndex$" Grid.Column="$columnIndex$"$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ListBoxItem</Title>
      <Shortcut>ltbxim</Shortcut>
      <Description>ListBoxItem</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListBoxItem</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<ListBoxItem>$end$</ListBoxItem>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>StackPanel</Title>
      <Shortcut>p</Shortcut>
      <Description>StackPanel</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:StackPanel</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:sp</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<StackPanel>$end$</StackPanel>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>StackPanel (horizontal)</Title>
      <Shortcut>p</Shortcut>
      <Description>StackPanel with horizontal orientation</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:StackPanelHorizontal</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:sph</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<StackPanel Orientation="Horizontal">$end$</StackPanel>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>StackPanel (vertical)</Title>
      <Shortcut>p</Shortcut>
      <Description>StackPanel with vertical orientation</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:StackPanelVertical</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:spv</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<StackPanel Orientation="Vertical">$end$</StackPanel>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ToolBarTray</Title>
      <Shortcut>tlbrty</Shortcut>
      <Description>ToolBarTray</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ToolBarTray</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<ToolBarTray>$end$
    <ToolBar Band="0">
    </ToolBar>
</ToolBarTray>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>UniformGrid</Title>
      <Shortcut>p</Shortcut>
      <Description>UniformGrid</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:UniformGrid</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:ug</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<UniformGrid>$end$</UniformGrid>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>WrapPanel</Title>
      <Shortcut>p</Shortcut>
      <Description>WrapPanel</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:WrapPanel</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:wp</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<WrapPanel>$end$</WrapPanel>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>WrapPanel (horizontal)</Title>
      <Shortcut>p</Shortcut>
      <Description>WrapPanel with horizontal orientation</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:WrapPanelHorizontal</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:wph</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<WrapPanel Orientation="Horizontal">$end$</WrapPanel>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>WrapPanel (vertical)</Title>
      <Shortcut>p</Shortcut>
      <Description>WrapPanel with vertical orientation</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:WrapPanelVertical</Keyword>
        <Keyword>Meta-Tag SubmenuShortcut:wpv</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Xaml"><![CDATA[<WrapPanel Orientation="Vertical">$end$</WrapPanel>]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>