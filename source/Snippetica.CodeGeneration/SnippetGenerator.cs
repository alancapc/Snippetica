// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using Pihrtsoft.Snippets;

namespace Snippetica.CodeGeneration
{
    public abstract class SnippetGenerator
    {
        public IEnumerable<Snippet> GenerateSnippets(string sourceDirectoryPath, SearchOption searchOption = SearchOption.AllDirectories)
        {
            return SnippetSerializer.Deserialize(sourceDirectoryPath, searchOption)
                .SelectMany(snippet => GenerateSnippets(snippet));
        }

        public IEnumerable<Snippet> GenerateSnippets(Snippet snippet)
        {
            foreach (Job job in CreateJobs(snippet))
            {
                ExecutionContext context = CreateExecutionContext(snippet);

                job.Execute(context);

                if (!context.IsCanceled)
                {
                    Collection<Snippet> snippets = context.Snippets;

                    for (int i = 0; i < snippets.Count; i++)
                        yield return PostProcess(snippets[i]);
                }
            }
        }

        protected virtual ExecutionContext CreateExecutionContext(Snippet snippet)
        {
            return new ExecutionContext((Snippet)snippet.Clone());
        }

        protected abstract JobCollection CreateJobs(Snippet snippet);

        protected virtual Snippet PostProcess(Snippet snippet)
        {
            RemoveUnusedLiterals(snippet);

            snippet.AddTag(KnownTags.AutoGenerated);

            return snippet;
        }

        private static void RemoveUnusedLiterals(Snippet snippet)
        {
            for (int i = snippet.Literals.Count - 1; i >= 0; i--)
            {
                Literal literal = snippet.Literals[i];

                if (!literal.IsEditable
                    && string.IsNullOrEmpty(literal.DefaultValue))
                {
                    snippet.RemoveLiteralAndPlaceholders(literal);
                }
            }
        }

        public static IEnumerable<Snippet> GenerateAlternativeShortcuts(List<Snippet> snippets)
        {
            int count = snippets.Count;

            for (int i = 0; i < count; i++)
            {
                if (snippets[i].TryGetTag(KnownTags.AlternativeShortcut, out TagInfo info))
                {
                    snippets[i].Keywords.RemoveAt(info.KeywordIndex);

                    yield return GenerateSnippet(snippets[i], info.Value);
                }
            }

            Snippet GenerateSnippet(Snippet snippet, string shortcut)
            {
                snippet = (Snippet)snippet.Clone();

                snippet.Shortcut = shortcut;
                snippet.SuffixTitle(" _");
                snippet.SuffixFileName("_");

                return snippet;
            }
        }
    }
}
