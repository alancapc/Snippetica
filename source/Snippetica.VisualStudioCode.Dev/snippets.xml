<!--Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0.-->
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Class with Inline Constructor/Destructor</Title>
      <Shortcut>ci</Shortcut>
      <Description>Class declaration with inline constructor/destructor</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:class_with_inline_constructor_destructor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[class $name$
{
public:
    $name$()
    {
    }

    ~$name$()
    {
    }

private:
    $selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>array type</Title>
      <Shortcut>a</Shortcut>
      <Description>array type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ArrayOfTType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$_type$[]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>break statement</Title>
      <Shortcut>bk</Shortcut>
      <Description>break statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:BreakStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[break;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>?: operator (equal to null)</Title>
      <Shortcut>con</Shortcut>
      <Description>?: (conditional) operator with condition whether the expression is equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ConditionalOperatorEqualToNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>expression</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>False expression</ToolTip>
          <Default>null</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>True expression</ToolTip>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[($expression$ == null) ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>?: operator (not equal to null)</Title>
      <Shortcut>conn</Shortcut>
      <Description>?: (conditional) operator with condition whether the expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ConditionalOperatorNotEqualToNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>expression</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>False expression</ToolTip>
          <Default>null</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>True expression</ToolTip>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[($expression$ != null) ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>continue statement</Title>
      <Shortcut>ce</Shortcut>
      <Description>continue statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ContinueStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[continue;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Debug.Assert != null</Title>
      <Shortcut>dann</Shortcut>
      <Description>Debug.Assert method with condition whether the expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DebugAssertNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>message</ID>
          <ToolTip>The message text</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Debug.Assert($expression$ != null, $message$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary&lt;TKey, TValue&gt; type</Title>
      <Shortcut>gd</Shortcut>
      <Description>Dictionary&lt;TKey, TValue&gt; type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DictionaryOfTKeyTValueType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>_valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Dictionary<$_keyType$, $_valueType$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary&lt;TKey, TValue&gt; variable</Title>
      <Shortcut>vd</Shortcut>
      <Description>Dictionary&lt;TKey, TValue&gt; variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DictionaryOfTKeyTValueVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>dictionaryIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>dic</Default>
        </Literal>
        <Literal>
          <ID>keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $dictionaryIdentifier$ = new Dictionary<$keyType$, $valueType$>();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary&lt;TKey, TValue&gt; variable (with initializer)</Title>
      <Shortcut>vd_</Shortcut>
      <Description>Dictionary&lt;TKey, TValue&gt; variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DictionaryOfTKeyTValueVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
        <Literal>
          <ID>dictionaryIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>dic</Default>
        </Literal>
        <Literal>
          <ID>keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $dictionaryIdentifier$ = new Dictionary<$keyType$, $valueType$>() { [0] = $_value$ };$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>do while not null</Title>
      <Shortcut>donn</Shortcut>
      <Description>do statement with condition whether an expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DoNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[do
{
    $end$

} while ($expression$ != null);]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>do while null</Title>
      <Shortcut>don</Shortcut>
      <Description>do statement with condition whether an expression is equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DoNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[do
{
    $end$

} while ($expression$ == null);]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet&lt;T&gt; type</Title>
      <Shortcut>ghs</Shortcut>
      <Description>HashSet&lt;T&gt; type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[HashSet<$_type$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet&lt;T&gt; variable</Title>
      <Shortcut>vhs</Shortcut>
      <Description>HashSet&lt;T&gt; variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new HashSet<$_type$>();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet&lt;T&gt; variable (with initializer)</Title>
      <Shortcut>vhs_</Shortcut>
      <Description>HashSet&lt;T&gt; variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new HashSet<$_type$>() { $_value$ };$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if Enum.TryParse</Title>
      <Shortcut>ifemtp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns true.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$type$ $result$;
if (Enum.TryParse($value$, out $result$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if not Enum.TryParse</Title>
      <Shortcut>iffemtp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns false.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfNotEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$type$ $result$;
if (!Enum.TryParse($value$, out $result$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if !string.IsNullOrEmpty</Title>
      <Shortcut>iffsne</Shortcut>
      <Description>if !string.IsNullOrEmpty</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfNotStringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!string.IsNullOrEmpty($expression$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if !string.IsNullOrWhiteSpace</Title>
      <Shortcut>iffsnw</Shortcut>
      <Description>if !string.IsNullOrWhiteSpace</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfNotStringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!string.IsNullOrWhiteSpace($expression$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if string.IsNullOrEmpty</Title>
      <Shortcut>ifsne</Shortcut>
      <Description>if string.IsNullOrEmpty</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfStringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (string.IsNullOrEmpty($expression$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if string.IsNullOrWhiteSpace</Title>
      <Shortcut>ifsnw</Shortcut>
      <Description>if string.IsNullOrWhiteSpace</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfStringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (string.IsNullOrWhiteSpace($expression$))
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>lambda expression with 2 parameters</Title>
      <Shortcut>l2</Shortcut>
      <Description>lambda expression with 2 parameters</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:LambdaExpressionWithTwoParameters</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false">
          <ID>lambdaParam1</ID>
          <ToolTip>First parameter name</ToolTip>
          <Default>f</Default>
        </Literal>
        <Literal Editable="false">
          <ID>lambdaParam2</ID>
          <ToolTip>Second parameter name</ToolTip>
          <Default>g</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[($lambdaParam1$, $lambdaParam2$) => $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List&lt;T&gt; type</Title>
      <Shortcut>gl</Shortcut>
      <Description>List&lt;T&gt; type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[List<$_type$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List&lt;T&gt; variable</Title>
      <Shortcut>vl</Shortcut>
      <Description>List&lt;T&gt; variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new List<$_type$>();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List&lt;T&gt; variable (with initializer)</Title>
      <Shortcut>vl_</Shortcut>
      <Description>List&lt;T&gt; variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new List<$_type$>() { $_value$ };$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>namespace</Title>
      <Shortcut>ns</Shortcut>
      <Description>namespace declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:Namespace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Namespace name</ToolTip>
          <Default>NamespaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[namespace $name$
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>new array </Title>
      <Shortcut>na</Shortcut>
      <Description>new array </Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:NewArrayOfT</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arrayLength</ID>
          <ToolTip>Array length</ToolTip>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[new $_type$[$_arrayLength$]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>new array (with initializer)</Title>
      <Shortcut>na_</Shortcut>
      <Description>new array (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:NewArrayOfTWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[new $_type$[] { $_value$ }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection&lt;T&gt; type</Title>
      <Shortcut>goc</Shortcut>
      <Description>ObservableCollection&lt;T&gt; type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[ObservableCollection<$_type$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection&lt;T&gt; variable</Title>
      <Shortcut>voc</Shortcut>
      <Description>ObservableCollection&lt;T&gt; variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Collection identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new ObservableCollection<$_type$>();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection&lt;T&gt; variable (with initializer)</Title>
      <Shortcut>voc_</Shortcut>
      <Description>ObservableCollection&lt;T&gt; variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Collection identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new ObservableCollection<$_type$>() { $_value$ };$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Regex type</Title>
      <Shortcut>rx</Shortcut>
      <Description>Regex type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:Regex</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Text.RegularExpressions</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp"><![CDATA[Regex$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return new</Title>
      <Shortcut>rn</Shortcut>
      <Description>return new</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ReturnNew</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[return new$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return new containing type</Title>
      <Shortcut>rnthis</Shortcut>
      <Description>return new containing type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ReturnNewThis</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false">
          <ID>className</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
          <Function>ClassName()</Function>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[return new $className$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return statement</Title>
      <Shortcut>re</Shortcut>
      <Description>return statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ReturnStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[return;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>StringBuilder variable</Title>
      <Shortcut>vsb</Shortcut>
      <Description>StringBuilder variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:StringBuilderVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>sb</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $identifier$ = new StringBuilder();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw statement</Title>
      <Shortcut>tw</Shortcut>
      <Description>throw statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ThrowStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[throw;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>TimeSpan type</Title>
      <Shortcut>ts</Shortcut>
      <Description>TimeSpan type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:TimeSpanType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp"><![CDATA[TimeSpan$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>variable declaration with as operator + if not null</Title>
      <Shortcut>vasnn</Shortcut>
      <Description>variable declaration with as operator + condition whether the variable is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:VariableAsTIfNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Type to cast to</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to cast</ToolTip>
          <Default>expression</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $identifier$ = $expression$ as $_type$;
if ($identifier$ != null)
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>while not null</Title>
      <Shortcut>wenn</Shortcut>
      <Description>while statement with condition whether an expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:WhileNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[while ($expression$ != null)
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>while null</Title>
      <Shortcut>wen</Shortcut>
      <Description>while statement with condition whether an expression is equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:WhileNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[while ($expression$ == null)
{
    $end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>yield return new</Title>
      <Shortcut>yrn</Shortcut>
      <Description>yield return new</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:YieldReturnNew</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[yield return new$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>yield return new containing type</Title>
      <Shortcut>yrnthis</Shortcut>
      <Description>yield return new containing type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:YieldReturnNewThis</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false">
          <ID>className</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
          <Function>ClassName()</Function>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[yield return new $className$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>div with class attribute</Title>
      <Shortcut>divcs</Shortcut>
      <Description>div with class attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:div_class</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>class</ID>
          <ToolTip>CSS class name</ToolTip>
          <Default>class</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<div class="$class$">$end$</div>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>div with id attribute</Title>
      <Shortcut>divid</Shortcut>
      <Description>div with id attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:div_id</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>id</ID>
          <ToolTip>CSS id value</ToolTip>
          <Default>id</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<div id="$id$">$end$</div>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>meta viewport</Title>
      <Shortcut>metavp</Shortcut>
      <Description>meta viewport</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:meta_viewport</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Html"><![CDATA[<meta name="viewport" content="width=device-width" />$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>span with class attribute</Title>
      <Shortcut>spancs</Shortcut>
      <Description>span with class attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:span_class</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>class</ID>
          <ToolTip>CSS class name</ToolTip>
          <Default>class</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<span class="$class$">$end$</span>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>span with id attribute</Title>
      <Shortcut>spanid</Shortcut>
      <Description>span with id attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:span_id</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>id</ID>
          <ToolTip>CSS id value</ToolTip>
          <Default>id</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<span id="$id$">$end$</span>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>table with sections</Title>
      <Shortcut>table2</Shortcut>
      <Description>table with sections</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:table_with_sections</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Html"><![CDATA[<table>
    <caption>$end$</caption>
    <thead>
        <tr>
            <th></th>
        </tr>
    </thead>
    <tfoot>
        <tr>
            <td></td>
        </tr>
    </tfoot>
    <tbody>
        <tr>
            <td></td>
        </tr>
    </tbody>
</table>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>array type</Title>
      <Shortcut>a</Shortcut>
      <Description>array type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ArrayOfTType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$_type$()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary(Of TKey, TValue) variable</Title>
      <Shortcut>vd</Shortcut>
      <Description>Dictionary(Of TKey, TValue) variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DictionaryOfTKeyTValueVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>dictionaryIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>dic</Default>
        </Literal>
        <Literal>
          <ID>keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>Object</Default>
        </Literal>
        <Literal>
          <ID>valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $dictionaryIdentifier$ = new Dictionary(Of $keyType$, $valueType$)()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary(Of TKey, TValue) variable (with initializer)</Title>
      <Shortcut>vd_</Shortcut>
      <Description>Dictionary(Of TKey, TValue) variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:DictionaryOfTKeyTValueVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_value</ID>
          <Default>Nothing</Default>
        </Literal>
        <Literal>
          <ID>dictionaryIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>dic</Default>
        </Literal>
        <Literal>
          <ID>keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>Object</Default>
        </Literal>
        <Literal>
          <ID>valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $dictionaryIdentifier$ = new Dictionary(Of $keyType$, $valueType$)() From {{0, $_value$}}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet(Of T) type</Title>
      <Shortcut>ghs</Shortcut>
      <Description>HashSet(Of T) type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[HashSet(Of $_type$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet(Of T) variable</Title>
      <Shortcut>vhs</Shortcut>
      <Description>HashSet(Of T) variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new HashSet(Of $_type$)()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>HashSet(Of T) variable (with initializer)</Title>
      <Shortcut>vhs_</Shortcut>
      <Description>HashSet(Of T) variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:HashSetOfTVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>Nothing</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new HashSet(Of $_type$)() From {$_value$}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if Enum.TryParse</Title>
      <Shortcut>ifemtp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns true.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $result$ As $type$
If Enum.TryParse($value$, $result$)
    $end$
End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if not Enum.TryParse</Title>
      <Shortcut>iffemtp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns false.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:IfNotEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $result$ As $type$
If Not Enum.TryParse($value$, $result$)
    $end$
End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Lambda expression with 2 parameters</Title>
      <Shortcut>l2</Shortcut>
      <Description>Lambda expression with 2 parameters</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:LambdaExpressionWithTwoParameters</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false">
          <ID>lambdaParam1</ID>
          <ToolTip>First parameter name</ToolTip>
          <Default>f</Default>
        </Literal>
        <Literal Editable="false">
          <ID>lambdaParam2</ID>
          <ToolTip>Second parameter name</ToolTip>
          <Default>g</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Function($lambdaParam1$, $lambdaParam2$) $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List(Of T) type</Title>
      <Shortcut>gl</Shortcut>
      <Description>List(Of T) type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[List(Of $_type$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List(Of T) variable</Title>
      <Shortcut>vl</Shortcut>
      <Description>List(Of T) variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new List(Of $_type$)()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>List(Of T) variable (with initializer)</Title>
      <Shortcut>vl_</Shortcut>
      <Description>List(Of T) variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ListOfTVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>Nothing</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new List(Of $_type$)() From {$_value$}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>namespace</Title>
      <Shortcut>ns</Shortcut>
      <Description>namespace declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:Namespace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Namespace name</ToolTip>
          <Default>NamespaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Namespace $name$
    $end$
End Namespace]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>new array </Title>
      <Shortcut>na</Shortcut>
      <Description>new array </Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:NewArrayOfT</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arrayLength</ID>
          <ToolTip>Array length</ToolTip>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[New $_type$($_arrayLength$){}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Object keyword</Title>
      <Shortcut>o</Shortcut>
      <Description>Object keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObjectKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Object$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection(Of T) type</Title>
      <Shortcut>goc</Shortcut>
      <Description>ObservableCollection(Of T) type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[ObservableCollection(Of $_type$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection(Of T) variable</Title>
      <Shortcut>voc</Shortcut>
      <Description>ObservableCollection(Of T) variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new ObservableCollection(Of $_type$)()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection(Of T) variable (with initializer)</Title>
      <Shortcut>voc_</Shortcut>
      <Description>ObservableCollection(Of T) variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ObservableCollectionOfTVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>Nothing</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = new ObservableCollection(Of $_type$)() From {$_value$}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Regex type</Title>
      <Shortcut>rx</Shortcut>
      <Description>Regex type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:Regex</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Text.RegularExpressions</Namespace>
        </Import>
      </Imports>
      <Code Language="VB"><![CDATA[Regex$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Return keyword</Title>
      <Shortcut>r</Shortcut>
      <Description>Return keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ReturnKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Return$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>StringBuilder variable</Title>
      <Shortcut>vsb</Shortcut>
      <Description>StringBuilder variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:StringBuilderVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>sb</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $identifier$ = New StringBuilder()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>String keyword</Title>
      <Shortcut>s</Shortcut>
      <Description>String keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:StringKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[String$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw statement</Title>
      <Shortcut>tw</Shortcut>
      <Description>Throw statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:ThrowStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Throw$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>TimeSpan type</Title>
      <Shortcut>ts</Shortcut>
      <Description>TimeSpan type declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:TimeSpanType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Code Language="VB"><![CDATA[TimeSpan$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Yield keyword</Title>
      <Shortcut>y</Shortcut>
      <Description>Yield keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Tag Name:YieldKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Yield$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>